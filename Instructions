Programming refreshment, practice with standards and header files, practice with trees, traversals, command line arguments, and file IO.

Note: command line arguments and keyboard input can directly be reused in the later compiler project so make sure to do it well and modular.

The submissionCommand will be given for every project but it will always be of this format:
/home/hauschildm/submitProject/submit_cs4280_P#
where # is the project number. Resubmissions are allowed, the latest found submission dated before or during the grace period will be graded.

For this project, you would want to run a submission script to submit your project. You want to give the name of the directory containing your project to this script when you run it as follows:

/home/hauschildm/submitProject/submit_cs4280_P0 [folderorfilenamewhereprojectis]

To clarify, as every semester people get confused by this: If my directory with my project was project0 then from the directory that contains project0 (not inside project0 directory)  I would type:

/home/hauschildm/submitProject/submit_cs4280_P0 project0

 

In your submission folder you should have a README.txt describing what script or makefile I can use to compile your project and what command I need to run it (usually a makefile, but if it requires something else let me know).

 

In this program you will be writing a program to build a tree and print it using different traversals. The program will be invoked as

P0 [file]
where file is an optional argument.

If the file argument is not given, the program reads data from the keyboard as a device (15%).

If the argument is given, the program reads data file file.
Programs improperly implementing file name or executable will not be graded.
15% is for style. 15% interactive input. 70% performance.

Example invocations:

P0 // read from the keyboard until simulated EOF
P0 < somefile // same as above except redirecting from somefile instead of keyboard, this tests keyboard input
P0 somefile  // read from somefile

Assume you do not know the size of the input file
Assume the input data is all strings separated with standard WS separators (space, tab, new line)
If the input file is not readable for whatever reason, or command line arguments are not correct, the program must abort with an appropriate message
The program will read the data left to right and put them into a tree. The tree for this project is a modified binary search tree. In particular, the nodes for your tree will have 3 children. The left child, right child and middle child. When storing new strings on the tree, you will put them in the tree as you would on a normal binary search tree using left and right children. However, if there is an identical match, you will hang a new child off of the middle child. Note that as you could have more than a single duplicate (for example, a string repeated 3 times), if this happens you would have a linked list of children using the middle child pointers.
The binary search tree should be with respect to the first letter of the string and only the first letter, so searching the tree for a string would be off the first letter. Strings that differ but have the same first letter would be counted as identical and be stored in the middle pointers.
Tree is never balanced nor restructured other than growing new nodes.
The program will subsequently output 3 files corresponding to 3 traversals, named file.preorder, file.inorder and file.postorder. Note that file is the base name of the input file if given, and it is output if not given.
Traversals
preorder
inorder
postoder
Printing in traversal
Indent the node by 2 x depth of the node, then print the node's first letter, a ":", then the word in that node. So for example, if printing the string "dog" at depth 5, you would space over 10 spaces from the left and then print d:dog
Example will be elaborated in class
File xxx contains

george adam ala 15 ada 125 john haus geode
invocation: > P0 xxx
Output files: xxx.inorder xxx.preorder xxx.postorder
Invocation: > P0 < xxx // or > P0, followed by typing the data followed by EOF
Output files: ouput.inorder output.preorder output.postorder
Standards related requirements:
Have the following functions/methods minimum (the types and arguments are up to you, the names are required as given). Note that these can be in separate files or all the same source file, but it must be different from whatever source file has your main() function or equivalent. I would suggest putting them in a tree.cpp or something similar, along with a tree.h header file. They could also all be in the same class or separate classes.
buildTree()
printInorder()
printPreorder()
printPostorder()
Define the node type in node.h, which could be included in your tree.cpp
Keep the main function in a separate file (regardless of language). This main() function or class would call the tree functions from the other source file or class.
Traversals taken from the 3130 textbook:

Preorder:

process root
process children left, middle, right
Inorder:

process left child
process root (taking you down the middle pointer)
proccess right child
Postorder:

process children left, middle, right
process root
More suggestions

Using top-down decomposition you have 3 tasks in main:
Process command arguments, set up file to work regardless of source, check if file readable, set the basename for the output file, etc.
Build the tree
Traverse the tree three different ways generating outputs
The main function should handle the 3 functionalities. #1 should be handled inside of main, functions for #2 and #3 should be in another separate source as indicated. Any node types should be defined in a separate header file.   

For development purposes, do either 1 or 2 first. 3 should follow 2, first with one traversal only.

Processing either keyboard or file input can be done one of these two ways:

If keyboard input, read the input into temporary file, after which the rest of the program always processes file input
If keyboard input, set file pointer to stdin otherwise set file pointer to the actual file, then process always from the file pointer
Files you should submit: 

node.h, tree.c+tree.h (or as appropriate for your language)
main.c,
makefile
Sample structure for main.c

#include "node.h"
#include "tree.h"
int main(int argc, char* argv[]) {
  // process command line arguments first and error if improper
  // if filename given, make sure file is readable, error otherwise
  // set up keyboard processing so that below this point there is only one version of the code

   node_t *root = buildTree(file);
   printPreorder(root);
   printInorder(root);
   printPostorder(root);

   return 0;
}

Ideas for printing tree with indentations

static void printPreorder(nodeType *rootP,int level) {
  if (rootP==NULL) return;
  printf("%*c%d:%-9s ",level*2,' ',level,NodeId.info); // assume some info printed as string
  printf("\n");
  printPreorder(rootP->left,level+1);
  printPreorder(rootP->right,level+1);
}

Testing

This section is non-exhaustive testing of P0

Create test files:
P0_test1 containing empty file
P0_test2 containing one string: adam
P0_test3 containing some strings with the first letter the same (some repeats) but doing it over different lines, e.g., use the example from above
For each test file, draw by hand the tree that should be generated. 
Decide on invocations and what should happen, what should be output filenames if no error, and what the output files should look like - using the hand drawn trees for each file
Run the invocations and check against predictions
P0 < P0_test1
Error
P0 < P0_test3
Outputs output.inorder output.preorder output.postorder, each containing
the stings (no repetitions)
P0 P0_test3
Outputs P0_test3.inorder P0_test3.preorder P0_test3.postorder containing as above
Grading

15% standards, coding and architectural
15% keyboard input
10% proper errors
60% proper outputs
